{"version":3,"sources":["Components/Timer/index.js","Components/Timer/Timer.js","App.js","index.js"],"names":["Timer","time","step","autostart","onTick","onTimeEnd","onTimeStart","onTimePause","useState","valueTime","setStateTime","activeTime","setActiveTime","toggleActive","useEffect","interval","setInterval","clearInterval","className","moment","utc","format","onClick","App","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAEeA,ECCD,SAAC,GAEqC,IADlDC,EACiD,EADjDA,KAAMC,EAC2C,EAD3CA,KAAMC,EACqC,EADrCA,UACZC,EAAiD,EAAjDA,OAAQC,EAAyC,EAAzCA,UAAWC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,YAAiB,EACfC,mBAASP,GADM,mBAC1CQ,EAD0C,KAC/BC,EAD+B,OAEbF,qBAASL,GAFI,mBAE1CQ,EAF0C,KAE9BC,EAF8B,KAI3CC,EAAe,WACnBD,GAAeD,GACfA,EAAaJ,IAAgBD,KAwB/B,OArBAQ,qBAAU,WACR,IAAIC,EAAW,KAiBf,OAfIJ,GAAcF,EAAY,IAC5BM,EAAWC,aAAY,WACrBN,EAAaD,EAAaP,EAAO,OAEhCA,IAGLE,EAAOK,EAAY,EAAI,EAAIA,GAEvBA,GAAa,IACfC,EAAa,GACbL,KAIK,kBAAMY,cAAcF,MAC1B,CAACN,EAAWE,EAAYP,EAAQC,EAAWH,IAG5C,yBAAKgB,UAAU,SACb,yBAAKA,UAAU,eAEZC,IAAOC,IAAgB,IAAZX,GAAkBY,OAAO,aAEvC,yBAAKH,UAAU,oBACb,4BAAQI,QAAST,GAAjB,SACA,4BAAQS,QAAST,GAAjB,YCvBOU,MAhBf,WACE,OACE,yBAAKL,UAAU,OACb,kBAAC,EAAD,CACEjB,KAAQ,GACRC,KAAQ,IACRC,WAAa,EACbC,OAAU,SAACH,GAAD,OAAUuB,QAAQC,IAAI,gGAAuBxB,IACvDI,UAAa,kBAAMmB,QAAQC,IAAI,mEAC/BnB,YAAa,kBAAMkB,QAAQC,IAAI,qFAC/BlB,YAAa,kBAAMiB,QAAQC,IAAI,0FCRvCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.bf0b6dbe.chunk.js","sourcesContent":["import Timer from './Timer';\r\n\r\nexport default Timer;\r\n","import React, { useState, useEffect } from 'react'\r\nimport moment from 'moment'\r\n\r\nconst Timer = ({\r\n  time, step, autostart,\r\n  onTick, onTimeEnd, onTimeStart, onTimePause}) => {\r\n  const [valueTime, setStateTime] = useState(time)\r\n  const [activeTime, setActiveTime] = useState(autostart ? true : false)\r\n\r\n  const toggleActive = () => {\r\n    setActiveTime(!activeTime)\r\n    activeTime ? onTimePause() : onTimeStart()\r\n  }\r\n \r\n  useEffect(() => {\r\n    let interval = null;\r\n\r\n    if (activeTime && valueTime > 0) {\r\n      interval = setInterval(() => {\r\n        setStateTime(valueTime - (step / 1000));\r\n       \r\n      }, step);\r\n    } \r\n\r\n    onTick(valueTime < 0 ? 0 : valueTime)\r\n\r\n    if (valueTime <= 0) {\r\n      setStateTime(0)\r\n      onTimeEnd()\r\n    }\r\n    \r\n\r\n    return () => clearInterval(interval);\r\n  }, [valueTime, activeTime, onTick, onTimeEnd, step]);\r\n\r\n  return (\r\n    <div className=\"timer\">\r\n      <div className=\"timer__time\">\r\n        \r\n        {moment.utc(valueTime * 1000).format('HH:mm:ss')}\r\n      </div>\r\n      <div className=\"timer__btn__wrap\">\r\n        <button onClick={toggleActive}>Start</button>\r\n        <button onClick={toggleActive}>Pause</button>\r\n      </div> \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Timer\r\n","import React from 'react';\n\nimport Timer from './Components/Timer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer \n        time = {20}\n        step = {1000}\n        autostart = {false}\n        onTick = {(time) => console.log(\"Осталось времени: \" + time)}\n        onTimeEnd = {() => console.log(\"Время вышло!\")}\n        onTimeStart={() => console.log(\"Таймер запущен!\")}\n        onTimePause={() => console.log(\"Таймер на паузе!\")}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}